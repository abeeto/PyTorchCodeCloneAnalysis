# automatically generated by the FlatBuffers compiler, do not modify

# namespace: 

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Layer(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Layer()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsLayer(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # Layer
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Layer
    def Idx(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Layer
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Layer
    def Weights(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def WeightsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Layer
    def WeightsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def WeightsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Layer
    def WeightsShape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def WeightsShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def WeightsShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def WeightsShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

    # Layer
    def Bias(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def BiasAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Layer
    def BiasLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def BiasIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        return o == 0

    # Layer
    def BiasShape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def BiasShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def BiasShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def BiasShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Layer
    def Probability(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Layer
    def StartDim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def EndDim(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def OutSize(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def OutSizeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def OutSizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def OutSizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        return o == 0

    # Layer
    def Eps(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Layer
    def Momentum(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Layer
    def NumBatchesTracked(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def RunningMean(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def RunningMeanAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Layer
    def RunningMeanLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def RunningMeanIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        return o == 0

    # Layer
    def RunningMeanShape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def RunningMeanShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def RunningMeanShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def RunningMeanShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        return o == 0

    # Layer
    def RunningVar(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def RunningVarAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # Layer
    def RunningVarLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def RunningVarIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        return o == 0

    # Layer
    def RunningVarShape(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def RunningVarShapeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def RunningVarShapeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def RunningVarShapeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        return o == 0

    # Layer
    def KernelSize(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def KernelSizeAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def KernelSizeLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def KernelSizeIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        return o == 0

    # Layer
    def Dilation(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def DilationAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def DilationLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def DilationIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        return o == 0

    # Layer
    def Groups(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def InChannels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def OutChannels(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # Layer
    def PadMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Layer
    def Padding(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def PaddingAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def PaddingLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def PaddingIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        return o == 0

    # Layer
    def PaddingString(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Layer
    def Stride(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # Layer
    def StrideAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # Layer
    def StrideLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Layer
    def StrideIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        return o == 0

    # Layer
    def DataLayout(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Layer
    def CeilMode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # Layer
    def UpscaleFactor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def LayerStart(builder): builder.StartObject(30)
def Start(builder):
    return LayerStart(builder)
def LayerAddIdx(builder, idx): builder.PrependInt32Slot(0, idx, 0)
def AddIdx(builder, idx):
    return LayerAddIdx(builder, idx)
def LayerAddType(builder, type): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(type), 0)
def AddType(builder, type):
    return LayerAddType(builder, type)
def LayerAddName(builder, name): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def AddName(builder, name):
    return LayerAddName(builder, name)
def LayerAddWeights(builder, weights): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(weights), 0)
def AddWeights(builder, weights):
    return LayerAddWeights(builder, weights)
def LayerStartWeightsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartWeightsVector(builder, numElems):
    return LayerStartWeightsVector(builder, numElems)
def LayerAddWeightsShape(builder, weightsShape): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(weightsShape), 0)
def AddWeightsShape(builder, weightsShape):
    return LayerAddWeightsShape(builder, weightsShape)
def LayerStartWeightsShapeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartWeightsShapeVector(builder, numElems):
    return LayerStartWeightsShapeVector(builder, numElems)
def LayerAddBias(builder, bias): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(bias), 0)
def AddBias(builder, bias):
    return LayerAddBias(builder, bias)
def LayerStartBiasVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBiasVector(builder, numElems):
    return LayerStartBiasVector(builder, numElems)
def LayerAddBiasShape(builder, biasShape): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(biasShape), 0)
def AddBiasShape(builder, biasShape):
    return LayerAddBiasShape(builder, biasShape)
def LayerStartBiasShapeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartBiasShapeVector(builder, numElems):
    return LayerStartBiasShapeVector(builder, numElems)
def LayerAddProbability(builder, probability): builder.PrependFloat32Slot(7, probability, 0.0)
def AddProbability(builder, probability):
    return LayerAddProbability(builder, probability)
def LayerAddStartDim(builder, startDim): builder.PrependInt32Slot(8, startDim, 0)
def AddStartDim(builder, startDim):
    return LayerAddStartDim(builder, startDim)
def LayerAddEndDim(builder, endDim): builder.PrependInt32Slot(9, endDim, 0)
def AddEndDim(builder, endDim):
    return LayerAddEndDim(builder, endDim)
def LayerAddOutSize(builder, outSize): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(outSize), 0)
def AddOutSize(builder, outSize):
    return LayerAddOutSize(builder, outSize)
def LayerStartOutSizeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartOutSizeVector(builder, numElems):
    return LayerStartOutSizeVector(builder, numElems)
def LayerAddEps(builder, eps): builder.PrependFloat32Slot(11, eps, 0.0)
def AddEps(builder, eps):
    return LayerAddEps(builder, eps)
def LayerAddMomentum(builder, momentum): builder.PrependFloat32Slot(12, momentum, 0.0)
def AddMomentum(builder, momentum):
    return LayerAddMomentum(builder, momentum)
def LayerAddNumBatchesTracked(builder, numBatchesTracked): builder.PrependInt32Slot(13, numBatchesTracked, 0)
def AddNumBatchesTracked(builder, numBatchesTracked):
    return LayerAddNumBatchesTracked(builder, numBatchesTracked)
def LayerAddRunningMean(builder, runningMean): builder.PrependUOffsetTRelativeSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(runningMean), 0)
def AddRunningMean(builder, runningMean):
    return LayerAddRunningMean(builder, runningMean)
def LayerStartRunningMeanVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRunningMeanVector(builder, numElems):
    return LayerStartRunningMeanVector(builder, numElems)
def LayerAddRunningMeanShape(builder, runningMeanShape): builder.PrependUOffsetTRelativeSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(runningMeanShape), 0)
def AddRunningMeanShape(builder, runningMeanShape):
    return LayerAddRunningMeanShape(builder, runningMeanShape)
def LayerStartRunningMeanShapeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRunningMeanShapeVector(builder, numElems):
    return LayerStartRunningMeanShapeVector(builder, numElems)
def LayerAddRunningVar(builder, runningVar): builder.PrependUOffsetTRelativeSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(runningVar), 0)
def AddRunningVar(builder, runningVar):
    return LayerAddRunningVar(builder, runningVar)
def LayerStartRunningVarVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRunningVarVector(builder, numElems):
    return LayerStartRunningVarVector(builder, numElems)
def LayerAddRunningVarShape(builder, runningVarShape): builder.PrependUOffsetTRelativeSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(runningVarShape), 0)
def AddRunningVarShape(builder, runningVarShape):
    return LayerAddRunningVarShape(builder, runningVarShape)
def LayerStartRunningVarShapeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartRunningVarShapeVector(builder, numElems):
    return LayerStartRunningVarShapeVector(builder, numElems)
def LayerAddKernelSize(builder, kernelSize): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(kernelSize), 0)
def AddKernelSize(builder, kernelSize):
    return LayerAddKernelSize(builder, kernelSize)
def LayerStartKernelSizeVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartKernelSizeVector(builder, numElems):
    return LayerStartKernelSizeVector(builder, numElems)
def LayerAddDilation(builder, dilation): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(dilation), 0)
def AddDilation(builder, dilation):
    return LayerAddDilation(builder, dilation)
def LayerStartDilationVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartDilationVector(builder, numElems):
    return LayerStartDilationVector(builder, numElems)
def LayerAddGroups(builder, groups): builder.PrependInt32Slot(20, groups, 0)
def AddGroups(builder, groups):
    return LayerAddGroups(builder, groups)
def LayerAddInChannels(builder, inChannels): builder.PrependInt32Slot(21, inChannels, 0)
def AddInChannels(builder, inChannels):
    return LayerAddInChannels(builder, inChannels)
def LayerAddOutChannels(builder, outChannels): builder.PrependInt32Slot(22, outChannels, 0)
def AddOutChannels(builder, outChannels):
    return LayerAddOutChannels(builder, outChannels)
def LayerAddPadMode(builder, padMode): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(padMode), 0)
def AddPadMode(builder, padMode):
    return LayerAddPadMode(builder, padMode)
def LayerAddPadding(builder, padding): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(padding), 0)
def AddPadding(builder, padding):
    return LayerAddPadding(builder, padding)
def LayerStartPaddingVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartPaddingVector(builder, numElems):
    return LayerStartPaddingVector(builder, numElems)
def LayerAddPaddingString(builder, paddingString): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(paddingString), 0)
def AddPaddingString(builder, paddingString):
    return LayerAddPaddingString(builder, paddingString)
def LayerAddStride(builder, stride): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(stride), 0)
def AddStride(builder, stride):
    return LayerAddStride(builder, stride)
def LayerStartStrideVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def StartStrideVector(builder, numElems):
    return LayerStartStrideVector(builder, numElems)
def LayerAddDataLayout(builder, dataLayout): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(dataLayout), 0)
def AddDataLayout(builder, dataLayout):
    return LayerAddDataLayout(builder, dataLayout)
def LayerAddCeilMode(builder, ceilMode): builder.PrependBoolSlot(28, ceilMode, 0)
def AddCeilMode(builder, ceilMode):
    return LayerAddCeilMode(builder, ceilMode)
def LayerAddUpscaleFactor(builder, upscaleFactor): builder.PrependInt32Slot(29, upscaleFactor, 0)
def AddUpscaleFactor(builder, upscaleFactor):
    return LayerAddUpscaleFactor(builder, upscaleFactor)
def LayerEnd(builder): return builder.EndObject()
def End(builder):
    return LayerEnd(builder)