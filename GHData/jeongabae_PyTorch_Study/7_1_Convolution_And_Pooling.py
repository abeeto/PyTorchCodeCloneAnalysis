#합성곱 신경망(Convolutional Neural Network)은 이미지 처리에 탁월한 성능을 보이는 신경망
#합성곱 신경망은 크게 합성곱층과(Convolution layer)와 풀링층(Pooling layer)으로 구성

#1. 합성곱 신경망의 대두
#다층 퍼셉트론은 몇 가지 픽셀만 값이 달라져도 민감하게 예측에 영향을 받는다는 단점
#이미지의 공간적인 구조 정보를 보존하면서 학습할 수 있는 방법이 필요해졌고, 이를 위해 사용하는 것이 합성곱 신경망

#2. 채널(Channel)(=깊이(depth))
#이미지는 (높이, 너비, 채널)이라는 3차원 텐서
#높이는 이미지의 세로 방향 픽셀 수, 너비는 이미지의 가로 방향 픽셀 수, 채널은 색 성분
#흑백 이미지는 채널 수가 1이며, 각 픽셀은 0부터 255 사이의 값을 가짐.
#하나의 픽셀은 세 가지 색깔, 삼원색의 조합으로 이루어집니다.
# 만약, 높이가 28, 너비가 28인 컬러 이미지가 있다면 이 이미지의 텐서는 (28 × 28 × 3)의 크기를 가지는 3차원 텐서

#3. 합성곱 연산(Convolution operation)
#합성곱층은 합성곱 연산을 통해서 이미지의 특징을 추출하는 역할
#커널(kernel) 또는 필터(filter)라는  n*m 크기의 행렬로 높이*너비 크기의 이미지를
#처음부터 끝까지 겹치며 훑으면서 n*m크기의 겹쳐지는 부분의 각 이미지와 커널의 원소의 값을 곱해서 모두 더한 값을 출력으로 하는 것
#커널(kernel)은 일반적으로 3 × 3 또는 5 × 5를 사용

#입력으로부터 커널을 사용하여 합성곱 연산을 통해 나온 결과를 특성 맵(feature map)
#이동 범위를 스트라이드(stride)

#4. 패딩(Padding)
#합성곱 연산 이후에도 특성 맵의 크기가 입력의 크기와 동일하게 유지되도록 하고 싶다면 패딩(padding)을 사용
#패딩은 (합성곱 연산을 하기 전에) 입력의 가장자리에 지정된 개수의 폭만큼 행과 열을 추가해주는 것
#주로 값을 0으로 채우는 제로 패딩(zero padding)을 사용

#5. 가중치와 편향
#최종적으로 특성 맵을 얻기 위해서는 동일한 커널로 이미지 전체를 훑으며 합성곱 연산을 진행
#각 합성곱 연산마다 이미지의 모든 픽셀을 사용하는 것이 아니라, 커널과 맵핑되는 픽셀만을 입력으로 사용
#->결국 합성곱 신경망은 다층 퍼셉트론을 사용할 때보다 훨씬 적은 수의 가중치를 사용하며 공간적 구조 정보를 보존한다는 특징
#합성곱 연산을 통해서 특성 맵을 얻고, 활성화 함수를 지나는 연산을 하는 합성곱 신경망의 은닉층을 합성곱 신경망에서는 합성곱 층(convolution layer)

#합성곱 신경망에도 편향(bias)를 당연히 추가할 수 있습니다.
# 만약, 편향을 사용한다면 커널을 적용한 뒤에 더해집니다. 편향은 하나의 값만 존재하며, 커널이 적용된 결과의 모든 원소에 더해집니다.

#6. 특성 맵의 크기 계산 방법
#7. 다수의 채널을 가질 경우의 합성곱 연산(3차원 텐서의 합성곱 연산)
#8. 3차원 텐서의 합성곱 연산
#https://wikidocs.net/62306 참고

#9. 풀링(Pooling)
#일반적으로 합성곱 층(합성곱 연산 + 활성화 함수) 다음에는 풀링 층을 추가하는 것이 일반적
#풀링 층에서는 특성 맵을 다운샘플링하여 특성 맵의 크기를 줄이는 풀링 연산 이뤄짐
#일반적으로 최대 풀링(max pooling)과 평균 풀링(average pooling)이 사용됨.
"""
풀링 연산은 커널과 스트라이드 개념이 존재한다는 점에서 합성곱 연산과 유사하지만,
합성곱 연산과의 차이점은 학습해야 할 가중치가 없으며 연산 후에 채널 수가 변하지 않는다는 점
"""