import numpy as np
t = np.array([0., 1., 2., 3., 4., 5., 6.])
# 파이썬으로 설명하면 List를 생성해서 np.array로 1차원 array로 변환함.

print(t) #[0. 1. 2. 3. 4. 5. 6.]
print('Rank of t: ', t.ndim) #.ndim은 몇 차원인지를 출력합니다. 1차원은 벡터, 2차원은 행렬, 3차원은 3차원 텐서. 현재는 벡터이므로 1차원이 출력.
print('Shape of t: ', t.shape) # .shape는 크기를 출력합니다. (7, )는 (1, 7)을 의미합니다. 다시 말해 (1 × 7)의 크기를 가지는 벡터
"""
Rank of t:  1
Shape of t:  (7,)
"""
print('t[0] t[1] t[-1] = ', t[0], t[1], t[-1]) # 인덱스를 통한 원소 접근
print('t[2:5] t[4:-1]  = ', t[2:5], t[4:-1]) # [시작 번호 : 끝 번호]로 범위 지정을 통해 가져온다.

#1-1) Numpy 기초 이해하기
print('t[0] t[1] t[-1] = ', t[0], t[1], t[-1]) # 인덱스를 통한 원소 접근 #t[0] t[1] t[-1] =  0.0 1.0 6.0
print('t[2:5] t[4:-1]  = ', t[2:5], t[4:-1]) # [시작 번호 : 끝 번호]로 범위 지정을 통해 가져온다.
                                             # t[2:5] t[4:-1]  =  [2. 3. 4.] [4. 5.]
print('t[:2] t[3:]     = ', t[:2], t[3:]) # 시작 번호를 생략한 경우와 끝 번호를 생략한 경우#t[:2] t[3:]     =  [0. 1.] [3. 4. 5. 6.]

#2) 2D with Numpy
t = np.array([[1., 2., 3.], [4., 5., 6.], [7., 8., 9.], [10., 11., 12.]])
print(t)
"""
[[ 1.  2.  3.]
 [ 4.  5.  6.]
 [ 7.  8.  9.]
 [10. 11. 12.]]
"""
print('Rank  of t: ', t.ndim) #.ndim은 몇 차원인지를 출력. 현재는 행렬이므로 2차원이 출력
print('Shape of t: ', t.shape)  #.shape는 크기를 출력합니다. (4, 3)입니다. 다른 표현으로는 (4 × 3)입니다. 이는 행렬이 4행 3열
"""
Rank  of t:  2
Shape of t:  (4, 3)
"""

