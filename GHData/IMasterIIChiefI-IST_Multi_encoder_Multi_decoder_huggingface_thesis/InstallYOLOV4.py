import base64
from zipfile import ZipFile
from tkinter import filedialog
import os

root = "./"
path_to_zip_file = filedialog.askopenfilename(title="Select Yolov4 Master .zip file", filetypes=[('Zip', '*.zip')])
filename = os.path.split(path_to_zip_file)[1]

with ZipFile(path_to_zip_file, 'r') as zip_ref:
    zip_ref.extractall(root)
os.rename(root + filename[:-4], root + "YOLOv4")

if os.path.exists(root + "YOLOv4" + "/requirements.txt"):
  os.remove(root + "YOLOv4" + "/requirements.txt")
else:
  print("The file does not exist")

if os.path.exists(root + "YOLOv4" + "/tool/darknet2pytorch.py"):
  os.remove(root + "YOLOv4" + "/tool/darknet2pytorch.py")
else:
  print("The file does not exist")

if os.path.exists(root + "YOLOv4" + "/tool/torch_utils.py"):
  os.remove(root + "YOLOv4" + "/tool/torch_utils.py")
else:
  print("The file does not exist")

if os.path.exists(root + "YOLOv4" + "/dataset.py"):
  os.remove(root + "YOLOv4" + "/dataset.py")
else:
  print("The file does not exist")

if os.path.exists(root + "YOLOv4" + "/models.py"):
  os.remove(root + "YOLOv4" + "/models.py")
else:
  print("The file does not exist")

if os.path.exists(root + "YOLOv4" + "/train.py"):
  os.remove(root + "YOLOv4" + "/train.py")
else:
  print("The file does not exist")

try:
    os.mkdir(root + "YOLOv4")
except OSError as error:
    print('Folder creation error or already exists ')

try:
    os.mkdir(root + "YOLOv4" + "/checkpoints")
except OSError as error:
    print('Folder creation error or already exists ')

with open(root + "YOLOv4" + "/train.py", "wb") as file:
    train_string = base64.b64decode(b'')
    file.write(train_string)

with open(root + "YOLOv4" + "/dataset.py", "wb") as file:
    dataset_string = base64.b64decode(b'')
    file.write(dataset_string)

with open(root + "YOLOv4" + "/models.py", "wb") as file:
    models_string = base64.b64decode(b'')
    file.write(models_string)

with open(root + "YOLOv4" + "/tool/torch_utils.py", "wb") as file:
    torch_utils_string = base64.b64decode(b'aW1wb3J0IHN5cwppbXBvcnQgb3MKaW1wb3J0IHRpbWUKaW1wb3J0IG1hdGgKaW1wb3J0IHRvcmNoCmltcG9ydCBudW1weSBhcyBucApmcm9tIHRvcmNoLmF1dG9ncmFkIGltcG9ydCBWYXJpYWJsZQoKaW1wb3J0IGl0ZXJ0b29scwppbXBvcnQgc3RydWN0ICAjIGdldF9pbWFnZV9zaXplCmltcG9ydCBpbWdoZHIgICMgZ2V0X2ltYWdlX3NpemUKI3RvZG8gZml4CnRyeToKICAgIGZyb20gdG9vbCBpbXBvcnQgdXRpbHMKZXhjZXB0IEltcG9ydEVycm9yOgogICAgZnJvbSBZT0xPdjQudG9vbCBpbXBvcnQgdXRpbHMKCgpkZWYgYmJveF9pb3VzKGJveGVzMSwgYm94ZXMyLCB4MXkxeDJ5Mj1UcnVlKToKICAgIGlmIHgxeTF4MnkyOgogICAgICAgIG14ID0gdG9yY2gubWluKGJveGVzMVswXSwgYm94ZXMyWzBdKQogICAgICAgIE14ID0gdG9yY2gubWF4KGJveGVzMVsyXSwgYm94ZXMyWzJdKQogICAgICAgIG15ID0gdG9yY2gubWluKGJveGVzMVsxXSwgYm94ZXMyWzFdKQogICAgICAgIE15ID0gdG9yY2gubWF4KGJveGVzMVszXSwgYm94ZXMyWzNdKQogICAgICAgIHcxID0gYm94ZXMxWzJdIC0gYm94ZXMxWzBdCiAgICAgICAgaDEgPSBib3hlczFbM10gLSBib3hlczFbMV0KICAgICAgICB3MiA9IGJveGVzMlsyXSAtIGJveGVzMlswXQogICAgICAgIGgyID0gYm94ZXMyWzNdIC0gYm94ZXMyWzFdCiAgICBlbHNlOgogICAgICAgIG14ID0gdG9yY2gubWluKGJveGVzMVswXSAtIGJveGVzMVsyXSAvIDIuMCwgYm94ZXMyWzBdIC0gYm94ZXMyWzJdIC8gMi4wKQogICAgICAgIE14ID0gdG9yY2gubWF4KGJveGVzMVswXSArIGJveGVzMVsyXSAvIDIuMCwgYm94ZXMyWzBdICsgYm94ZXMyWzJdIC8gMi4wKQogICAgICAgIG15ID0gdG9yY2gubWluKGJveGVzMVsxXSAtIGJveGVzMVszXSAvIDIuMCwgYm94ZXMyWzFdIC0gYm94ZXMyWzNdIC8gMi4wKQogICAgICAgIE15ID0gdG9yY2gubWF4KGJveGVzMVsxXSArIGJveGVzMVszXSAvIDIuMCwgYm94ZXMyWzFdICsgYm94ZXMyWzNdIC8gMi4wKQogICAgICAgIHcxID0gYm94ZXMxWzJdCiAgICAgICAgaDEgPSBib3hlczFbM10KICAgICAgICB3MiA9IGJveGVzMlsyXQogICAgICAgIGgyID0gYm94ZXMyWzNdCiAgICB1dyA9IE14IC0gbXgKICAgIHVoID0gTXkgLSBteQogICAgY3cgPSB3MSArIHcyIC0gdXcKICAgIGNoID0gaDEgKyBoMiAtIHVoCiAgICBtYXNrID0gKChjdyA8PSAwKSArIChjaCA8PSAwKSA+IDApCiAgICBhcmVhMSA9IHcxICogaDEKICAgIGFyZWEyID0gdzIgKiBoMgogICAgY2FyZWEgPSBjdyAqIGNoCiAgICBjYXJlYVttYXNrXSA9IDAKICAgIHVhcmVhID0gYXJlYTEgKyBhcmVhMiAtIGNhcmVhCiAgICByZXR1cm4gY2FyZWEgLyB1YXJlYQoKCmRlZiBnZXRfcmVnaW9uX2JveGVzKGJveGVzX2FuZF9jb25mcyk6CgogICAgIyBwcmludCgnR2V0dGluZyBib3hlcyBmcm9tIGJveGVzIGFuZCBjb25mcyAuLi4nKQoKICAgIGJveGVzX2xpc3QgPSBbXQogICAgY29uZnNfbGlzdCA9IFtdCgogICAgZm9yIGl0ZW0gaW4gYm94ZXNfYW5kX2NvbmZzOgogICAgICAgIGJveGVzX2xpc3QuYXBwZW5kKGl0ZW1bMF0pCiAgICAgICAgY29uZnNfbGlzdC5hcHBlbmQoaXRlbVsxXSkKCiAgICAjIGJveGVzOiBbYmF0Y2gsIG51bTEgKyBudW0yICsgbnVtMywgMSwgNF0KICAgICMgY29uZnM6IFtiYXRjaCwgbnVtMSArIG51bTIgKyBudW0zLCBudW1fY2xhc3Nlc10KICAgIGJveGVzID0gdG9yY2guY2F0KGJveGVzX2xpc3QsIGRpbT0xKQogICAgY29uZnMgPSB0b3JjaC5jYXQoY29uZnNfbGlzdCwgZGltPTEpCiAgICAgICAgCiAgICByZXR1cm4gW2JveGVzLCBjb25mc10KCgpkZWYgY29udmVydDJjcHUoZ3B1X21hdHJpeCk6CiAgICByZXR1cm4gdG9yY2guRmxvYXRUZW5zb3IoZ3B1X21hdHJpeC5zaXplKCkpLmNvcHlfKGdwdV9tYXRyaXgpCgoKZGVmIGNvbnZlcnQyY3B1X2xvbmcoZ3B1X21hdHJpeCk6CiAgICByZXR1cm4gdG9yY2guTG9uZ1RlbnNvcihncHVfbWF0cml4LnNpemUoKSkuY29weV8oZ3B1X21hdHJpeCkKCgoKZGVmIGRvX2RldGVjdChtb2RlbCwgaW1nLCBjb25mX3RocmVzaCwgbm1zX3RocmVzaCwgdXNlX2N1ZGE9MSk6CiAgICBtb2RlbC5ldmFsKCkKICAgIHdpdGggdG9yY2gubm9fZ3JhZCgpOgogICAgICAgIHQwID0gdGltZS50aW1lKCkKCiAgICAgICAgaWYgdHlwZShpbWcpID09IG5wLm5kYXJyYXkgYW5kIGxlbihpbWcuc2hhcGUpID09IDM6ICAjIGN2MiBpbWFnZQogICAgICAgICAgICBpbWcgPSB0b3JjaC5mcm9tX251bXB5KGltZy50cmFuc3Bvc2UoMiwgMCwgMSkpLmZsb2F0KCkuZGl2KDI1NS4wKS51bnNxdWVlemUoMCkKICAgICAgICBlbGlmIHR5cGUoaW1nKSA9PSBucC5uZGFycmF5IGFuZCBsZW4oaW1nLnNoYXBlKSA9PSA0OgogICAgICAgICAgICBpbWcgPSB0b3JjaC5mcm9tX251bXB5KGltZy50cmFuc3Bvc2UoMCwgMywgMSwgMikpLmZsb2F0KCkuZGl2KDI1NS4wKQogICAgICAgIGVsc2U6CiAgICAgICAgICAgIHByaW50KCJ1bmtub3cgaW1hZ2UgdHlwZSIpCiAgICAgICAgICAgIGV4aXQoLTEpCgogICAgICAgIGlmIHVzZV9jdWRhOgogICAgICAgICAgICBpbWcgPSBpbWcuY3VkYSgpCiAgICAgICAgaW1nID0gdG9yY2guYXV0b2dyYWQuVmFyaWFibGUoaW1nKQoKICAgICAgICB0MSA9IHRpbWUudGltZSgpCgogICAgICAgIG91dHB1dCA9IG1vZGVsKGltZykKCiAgICAgICAgdDIgPSB0aW1lLnRpbWUoKQoKICAgICAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQogICAgICAgIHByaW50KCcgICAgICAgICAgIFByZXByb2Nlc3MgOiAlZicgJSAodDEgLSB0MCkpCiAgICAgICAgcHJpbnQoJyAgICAgIE1vZGVsIEluZmVyZW5jZSA6ICVmJyAlICh0MiAtIHQxKSkKICAgICAgICBwcmludCgnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKQoKICAgICAgICByZXR1cm4gdXRpbHMucG9zdF9wcm9jZXNzaW5nKGltZywgY29uZl90aHJlc2gsIG5tc190aHJlc2gsIG91dHB1dCkKCg==')
    file.write(torch_utils_string)

with open(root + "YOLOv4" + "/tool/darknet2pytorch.py", "wb") as file:
    darknet2pytorch_string = base64.b64decode(b'')
    file.write(darknet2pytorch_string)

with open(root + "YOLOv4" + "/tool/yolo_layer.py", "wb") as file:
    darknet2pytorch_string = base64.b64decode(b'')
    file.write(darknet2pytorch_string)