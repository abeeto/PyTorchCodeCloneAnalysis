from __future__ import print_function   #Python2 -> Python3
import torch           

#初期化されていない5×3行列作成
x = torch.empty(5,3)
print(x)
#output
"""
tensor([[8.9082e-39, 9.2755e-39, 1.0837e-38],
        [8.4490e-39, 1.0194e-38, 9.4592e-39],
        [1.0745e-38, 4.5918e-39, 9.9184e-39],
        [9.0000e-39, 9.2755e-39, 8.9082e-39],
        [9.9184e-39, 9.5510e-39, 8.9082e-39]])
"""

#ランダムに初期化された行列を作成
x = torch.rand(5,3)
print(x)
#output
"""
tensor([[0.0328, 0.6694, 0.3416],
        [0.6533, 0.2640, 0.5372],
        [0.2934, 0.5895, 0.0475],
        [0.2470, 0.4027, 0.3330],
        [0.3130, 0.7779, 0.7699]])
"""

#ゼロで満たされたdtype longの行列を作成
x = torch.zeros(5,3,dtype=torch.long)
print(x)
#output
"""
tensor([[0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0],
        [0, 0, 0]])
"""

#データから直接テンソルを作成する
x = torch.tensor([5.5,3])
print(x)
#output
"""
tensor([5.5000, 3.0000])
"""

#既存のテンソルに基づいてテンソルを作成する
#これらのメソッドはユーザーによって設定されない限りdtypeなどの入力テンソルのプロパティを再利用
x = x.new_ones(5,3,dtype=torch.double)
print(x)
#output
"""
tensor([[1., 1., 1.],
        [1., 1., 1.],
        [1., 1., 1.],
        [1., 1., 1.],
        [1., 1., 1.]], dtype=torch.float64)
"""
x = torch.randn_like(x,dtype=torch.float)
print(x)
#output
"""
tensor([[-0.2560, -0.6071,  0.2918],
        [ 0.6768, -1.2782,  1.7278],
        [-0.1542, -0.0247,  0.2003],
        [-0.0122,  1.5257, -0.5757],
        [ 1.3624,  1.1562,  0.0067]])
"""

#サイズを取得
print(x.size())
#output
"""
torch.Size([5, 3])
"""

#操作
#加算演算
y = torch.rand(5,3)
print(x + y)
#output
"""
tensor([[-0.3616,  0.5579,  0.2009],
        [-1.2256,  1.0349, -0.1959],
        [-0.3009,  0.5977,  1.5294],
        [ 1.5793,  1.7039,  0.4367],
        [ 0.5266,  3.4397,  0.3515]])
"""
#上と同じ
print(torch.add(x,y))
#output
"""
tensor([[ 0.0398, -0.0179,  1.2800],
        [-0.2610,  1.3551,  2.3167],
        [-1.1209,  1.4773, -0.6926],
        [ 1.9631, -1.3411,  2.1167],
        [ 0.5367,  0.2788,  1.4557]])
"""

#引数として出力テンソルを設定する
result = torch.empty(5,3)
torch.add(x,y,out=result)
print(result)
#output
"""
tensor([[-0.4431,  1.4015,  0.9755],
        [-0.8206,  2.3902,  1.5299],
        [ 1.6564,  1.1285,  1.3629],
        [ 1.1368,  2.7492,  0.0296],
        [ 0.8015,  0.9596, -0.2770]])
"""

#add x to y
y.add_(x)
print(y)
#output
"""
tensor([[ 1.0404, -0.0918, -1.3829],
        [-0.9324,  1.3451,  1.5596],
        [-0.2543,  1.6438,  3.2288],
        [-1.2591, -0.3168, -0.3223],
        [ 0.9144, -0.2837, -0.4128]])
"""

#NumPyのようなインデックスを使用できる！！！！！
print(x[:,1])
#output
"""
tensor([1.4619, 0.4941, 0.2247, 0.8695, 1.9044])
"""

#サイズ変更torch.view:テンソルのサイズを変更したいときに使用
x = torch.randn(4,4)
print(x)
"""
tensor([[-0.2822, -0.1841,  1.5677,  0.5003],
        [-0.5018,  2.0957,  1.4657,  0.4189],
        [-0.9633, -0.7603,  2.1329,  0.8056],
        [-1.4158, -0.6320,  0.0733, -0.1570]])
"""
y = x.view(16)
z = x.view(-1,8)
print(x.size(),y.size(),z.size())
#output
"""
torch.Size([4, 4]) torch.Size([16]) torch.Size([2, 8])
"""

#1要素のテンソルがある場合.item(),Pythonの数値として値を取得するために使用
x = torch.randn(1)
print(x)
"""
tensor([-1.6796])
"""
print(x.item())
"""
-0.6202473640441895
"""

#NumPyブリッジ
#トーチテンソルをNumPy配列に、またはその逆に変換するのは簡単

#トーチテンソルをNumPy配列に変換
a = torch.ones(5)
print(a)
"""
tensor([1., 1., 1., 1., 1.])
"""

b = a.numpy()
print(b)
"""
[1. 1. 1. 1. 1.]
"""

#NumPy配列の値の変化の確認
a.add_(1)
print(a)
"""tensor([2., 2., 2., 2., 2.])"""
print(b)
"""[2. 2. 2. 2. 2.]"""

#CUDAテンソル
#CUDAが利用可能な場合にのみこのセルを実行します。
#'torch.device'オブジェクトを使用して、テンソルをGPUの内外に移動します。
if torch.cuda.is_available():
    device = torch.device("cuda")       #CUDAのデバイスオブジェクト
    y = torch.ones_like(x,device=device)#GPUでテンソルを直接作成する
    x = x.to(device)                    #または単に文字列to.("cuda")を使用します。
    z = x + y
    print(z)
    print(z.to("cpu",torch.double))     #toはdtypeも一緒に変更できます。
